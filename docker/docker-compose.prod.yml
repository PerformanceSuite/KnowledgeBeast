version: '3.9'

# KnowledgeBeast Production Docker Compose Stack
# Complete production-ready stack with monitoring, caching, and persistence
# Use: docker-compose -f docker/docker-compose.prod.yml up -d

services:
  # =============================================================================
  # KnowledgeBeast API Service
  # =============================================================================
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.production
      target: runtime
    image: knowledgebeast:2.3.0
    container_name: knowledgebeast-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Application settings
      - APP_ENV=production
      - LOG_LEVEL=INFO
      - WORKERS=4
      - MAX_REQUESTS=1000
      - MAX_REQUESTS_JITTER=50
      - TIMEOUT=60
      - GRACEFUL_TIMEOUT=30
      - KEEP_ALIVE=5

      # ChromaDB connection
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8001
      - CHROMA_PERSIST_DIRECTORY=/data/chroma

      # Redis connection
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-changeme}
      - REDIS_DB=0

      # Observability
      - PROMETHEUS_ENABLED=true
      - PROMETHEUS_PORT=8001
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318

      # Security
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - API_KEY=${API_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}

      # Performance
      - CACHE_TTL=3600
      - MAX_CONCURRENT_QUERIES=100
      - QUERY_TIMEOUT=30

    volumes:
      - api-data:/app/data
      - api-logs:/app/logs
      - api-cache:/app/cache
      - ./config:/app/config:ro
    networks:
      - knowledgebeast-net
    depends_on:
      chromadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.knowledgebeast.rule=Host(`api.knowledgebeast.com`)"
      - "traefik.http.routers.knowledgebeast.tls=true"
      - "traefik.http.services.knowledgebeast.loadbalancer.server.port=8000"

  # =============================================================================
  # ChromaDB - Vector Database
  # =============================================================================
  chromadb:
    image: chromadb/chroma:0.4.22
    container_name: knowledgebeast-chromadb
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=FALSE
      - ALLOW_RESET=FALSE
      - CHROMA_SERVER_AUTH_PROVIDER=${CHROMA_AUTH_PROVIDER:-chromadb.auth.token.TokenAuthServerProvider}
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMA_AUTH_TOKEN:-changeme}
    volumes:
      - chromadb-data:/chroma/chroma
    networks:
      - knowledgebeast-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # =============================================================================
  # Redis - Caching and Session Store
  # =============================================================================
  redis:
    image: redis:7.2-alpine
    container_name: knowledgebeast-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-changeme}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis-data:/data
    networks:
      - knowledgebeast-net
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # =============================================================================
  # Prometheus - Metrics Collection
  # =============================================================================
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: knowledgebeast-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus-data:/prometheus
    networks:
      - knowledgebeast-net
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # =============================================================================
  # Grafana - Metrics Visualization
  # =============================================================================
  grafana:
    image: grafana/grafana:10.2.2
    container_name: knowledgebeast-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
      - GF_SERVER_ROOT_URL=http://grafana.knowledgebeast.com
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    networks:
      - knowledgebeast-net
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # =============================================================================
  # Jaeger - Distributed Tracing
  # =============================================================================
  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: knowledgebeast-jaeger
    restart: unless-stopped
    ports:
      - "5775:5775/udp"  # Zipkin compatible endpoint
      - "6831:6831/udp"  # Compact thrift protocol
      - "6832:6832/udp"  # Binary thrift protocol
      - "5778:5778"      # Serve configs
      - "16686:16686"    # Web UI
      - "14268:14268"    # Jaeger collector
      - "14250:14250"    # gRPC
      - "4318:4318"      # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    volumes:
      - jaeger-data:/badger
    networks:
      - knowledgebeast-net
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # =============================================================================
  # NGINX - Reverse Proxy and Load Balancer
  # =============================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: knowledgebeast-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - knowledgebeast-net
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # =============================================================================
  # Elasticsearch - Log Aggregation (Optional)
  # =============================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    container_name: knowledgebeast-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - knowledgebeast-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    profiles:
      - elk

  # =============================================================================
  # Kibana - Log Visualization (Optional)
  # =============================================================================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.3
    container_name: knowledgebeast-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - knowledgebeast-net
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    profiles:
      - elk

# =============================================================================
# Networks
# =============================================================================
networks:
  knowledgebeast-net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes - Persistent Storage
# =============================================================================
volumes:
  api-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/api

  api-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs

  api-cache:
    driver: local

  chromadb-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/chromadb

  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis

  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus

  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana

  jaeger-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/jaeger

  nginx-logs:
    driver: local

  elasticsearch-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/elasticsearch
