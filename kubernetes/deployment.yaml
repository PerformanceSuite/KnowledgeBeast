---
# KnowledgeBeast Kubernetes Deployment
# Production-ready deployment with 3 replicas, resource limits, and health checks
apiVersion: apps/v1
kind: Deployment
metadata:
  name: knowledgebeast-api
  namespace: knowledgebeast
  labels:
    app: knowledgebeast
    component: api
    version: v2.3.0
    tier: backend
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubernetes.io/change-cause: "Initial production deployment v2.3.0"
spec:
  replicas: 3
  revisionHistoryLimit: 10

  # Rolling update strategy for zero-downtime deployments
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1        # Allow 1 extra pod during rollout
      maxUnavailable: 0  # Never allow pods to go below desired count

  selector:
    matchLabels:
      app: knowledgebeast
      component: api

  template:
    metadata:
      labels:
        app: knowledgebeast
        component: api
        version: v2.3.0
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"

    spec:
      # Security context for the pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      # Service account for RBAC
      serviceAccountName: knowledgebeast-api

      # Pod anti-affinity for high availability
      affinity:
        podAntiAffinity:
          # Prefer to spread pods across nodes
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - knowledgebeast
                topologyKey: kubernetes.io/hostname

          # Require pods to be in different availability zones
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - knowledgebeast
              topologyKey: topology.kubernetes.io/zone

      # Init containers for pre-flight checks
      initContainers:
        # Wait for ChromaDB to be ready
        - name: wait-for-chromadb
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              echo "Waiting for ChromaDB..."
              until nc -z knowledgebeast-chromadb 8000; do
                echo "ChromaDB not ready, waiting..."
                sleep 2
              done
              echo "ChromaDB is ready!"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL

        # Wait for Redis to be ready
        - name: wait-for-redis
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              echo "Waiting for Redis..."
              until nc -z knowledgebeast-redis 6379; do
                echo "Redis not ready, waiting..."
                sleep 2
              done
              echo "Redis is ready!"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL

      containers:
        - name: api
          image: knowledgebeast:2.3.0
          imagePullPolicy: IfNotPresent

          # Security context for the container
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL

          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
            - name: metrics
              containerPort: 8001
              protocol: TCP

          # Environment variables from ConfigMap and Secrets
          envFrom:
            - configMapRef:
                name: knowledgebeast-config
            - secretRef:
                name: knowledgebeast-secrets

          # Additional environment variables
          env:
            - name: APP_ENV
              value: "production"
            - name: LOG_LEVEL
              value: "INFO"
            - name: WORKERS
              value: "4"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName

          # Resource requests and limits
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
              ephemeral-storage: "1Gi"
            limits:
              memory: "1Gi"
              cpu: "1000m"
              ephemeral-storage: "2Gi"

          # Volume mounts
          volumeMounts:
            - name: data
              mountPath: /app/data
            - name: logs
              mountPath: /app/logs
            - name: cache
              mountPath: /app/cache
            - name: tmp
              mountPath: /tmp
            - name: config
              mountPath: /app/config
              readOnly: true

          # Liveness probe - restart if unhealthy
          livenessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3

          # Readiness probe - remove from service if not ready
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3

          # Startup probe - for slow-starting containers
          startupProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 30  # 150 seconds max startup time

          # Lifecycle hooks
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - sleep 15  # Allow time for load balancer to deregister

      # Volumes
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: knowledgebeast-data-pvc
        - name: logs
          emptyDir:
            sizeLimit: 1Gi
        - name: cache
          emptyDir:
            medium: Memory
            sizeLimit: 512Mi
        - name: tmp
          emptyDir:
            sizeLimit: 100Mi
        - name: config
          configMap:
            name: knowledgebeast-app-config

      # Termination grace period
      terminationGracePeriodSeconds: 30

      # DNS configuration
      dnsPolicy: ClusterFirst

      # Restart policy
      restartPolicy: Always

---
# ChromaDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: knowledgebeast-chromadb
  namespace: knowledgebeast
  labels:
    app: knowledgebeast
    component: chromadb
    version: v0.4.22
spec:
  replicas: 1
  strategy:
    type: Recreate  # Don't allow multiple instances

  selector:
    matchLabels:
      app: knowledgebeast
      component: chromadb

  template:
    metadata:
      labels:
        app: knowledgebeast
        component: chromadb
        version: v0.4.22

    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

      containers:
        - name: chromadb
          image: chromadb/chroma:0.4.22
          imagePullPolicy: IfNotPresent

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL

          ports:
            - name: http
              containerPort: 8000
              protocol: TCP

          env:
            - name: IS_PERSISTENT
              value: "TRUE"
            - name: PERSIST_DIRECTORY
              value: "/chroma/chroma"
            - name: ANONYMIZED_TELEMETRY
              value: "FALSE"
            - name: ALLOW_RESET
              value: "FALSE"

          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1000m"

          volumeMounts:
            - name: data
              mountPath: /chroma/chroma
            - name: tmp
              mountPath: /tmp

          livenessProbe:
            httpGet:
              path: /api/v1/heartbeat
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /api/v1/heartbeat
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3

      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: chromadb-data-pvc
        - name: tmp
          emptyDir:
            sizeLimit: 100Mi

      terminationGracePeriodSeconds: 30

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: knowledgebeast-redis
  namespace: knowledgebeast
  labels:
    app: knowledgebeast
    component: redis
    version: v7.2
spec:
  replicas: 1
  strategy:
    type: Recreate

  selector:
    matchLabels:
      app: knowledgebeast
      component: redis

  template:
    metadata:
      labels:
        app: knowledgebeast
        component: redis
        version: v7.2

    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999

      containers:
        - name: redis
          image: redis:7.2-alpine
          imagePullPolicy: IfNotPresent

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL

          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP

          command:
            - redis-server
            - --requirepass
            - $(REDIS_PASSWORD)
            - --maxmemory
            - 512mb
            - --maxmemory-policy
            - allkeys-lru
            - --save
            - "60 1000"
            - --appendonly
            - "yes"
            - --appendfsync
            - everysec

          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: knowledgebeast-secrets
                  key: redis-password

          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"

          volumeMounts:
            - name: data
              mountPath: /data

          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3

      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: redis-data-pvc

      terminationGracePeriodSeconds: 30
