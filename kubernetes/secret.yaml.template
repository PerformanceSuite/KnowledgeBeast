---
# KnowledgeBeast Secrets Template
# IMPORTANT: This is a template file. DO NOT commit actual secrets to version control.
#
# To create secrets:
# 1. Copy this file: cp secret.yaml.template secret.yaml
# 2. Replace all CHANGE_ME values with actual secrets
# 3. Apply: kubectl apply -f secret.yaml
# 4. Delete secret.yaml (it's in .gitignore)
#
# Alternatively, use sealed-secrets or external secret management:
# - HashiCorp Vault
# - AWS Secrets Manager
# - Azure Key Vault
# - Google Secret Manager

apiVersion: v1
kind: Secret
metadata:
  name: knowledgebeast-secrets
  namespace: knowledgebeast
  labels:
    app: knowledgebeast
type: Opaque
stringData:
  # Application secrets
  SECRET_KEY: "CHANGE_ME_RANDOM_64_CHAR_STRING_FOR_APP_SECRET"
  JWT_SECRET: "CHANGE_ME_RANDOM_64_CHAR_STRING_FOR_JWT"
  API_KEY: "CHANGE_ME_API_KEY_FOR_EXTERNAL_ACCESS"

  # Database passwords
  CHROMA_AUTH_TOKEN: "CHANGE_ME_CHROMADB_AUTH_TOKEN"

  # Redis password
  redis-password: "CHANGE_ME_REDIS_PASSWORD"

  # External API keys (if using external services)
  OPENAI_API_KEY: "CHANGE_ME_IF_USING_OPENAI"
  ANTHROPIC_API_KEY: "CHANGE_ME_IF_USING_ANTHROPIC"
  COHERE_API_KEY: "CHANGE_ME_IF_USING_COHERE"

  # Observability tokens
  GRAFANA_ADMIN_PASSWORD: "CHANGE_ME_GRAFANA_PASSWORD"
  PROMETHEUS_BASIC_AUTH: "CHANGE_ME_PROMETHEUS_PASSWORD"

  # OAuth/SSO credentials (if applicable)
  OAUTH_CLIENT_ID: "CHANGE_ME_OAUTH_CLIENT_ID"
  OAUTH_CLIENT_SECRET: "CHANGE_ME_OAUTH_CLIENT_SECRET"

  # Encryption keys
  DATA_ENCRYPTION_KEY: "CHANGE_ME_32_BYTE_ENCRYPTION_KEY"

---
# TLS Certificate Secret Template
# For HTTPS/TLS termination
apiVersion: v1
kind: Secret
metadata:
  name: knowledgebeast-tls
  namespace: knowledgebeast
  labels:
    app: knowledgebeast
type: kubernetes.io/tls
stringData:
  # Base64 encoded certificate and key
  # Generate with: openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
  #   -keyout tls.key -out tls.crt -subj "/CN=api.knowledgebeast.com"
  tls.crt: |
    -----BEGIN CERTIFICATE-----
    CHANGE_ME_PASTE_YOUR_TLS_CERTIFICATE_HERE
    -----END CERTIFICATE-----

  tls.key: |
    -----BEGIN PRIVATE KEY-----
    CHANGE_ME_PASTE_YOUR_TLS_PRIVATE_KEY_HERE
    -----END PRIVATE KEY-----

---
# Monitoring TLS Secret
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-tls
  namespace: knowledgebeast
  labels:
    app: knowledgebeast
    component: monitoring
type: kubernetes.io/tls
stringData:
  tls.crt: |
    -----BEGIN CERTIFICATE-----
    CHANGE_ME_PASTE_YOUR_TLS_CERTIFICATE_HERE
    -----END CERTIFICATE-----

  tls.key: |
    -----BEGIN PRIVATE KEY-----
    CHANGE_ME_PASTE_YOUR_TLS_PRIVATE_KEY_HERE
    -----END PRIVATE KEY-----

---
# Basic Auth Secret for Monitoring
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-basic-auth
  namespace: knowledgebeast
  labels:
    app: knowledgebeast
    component: monitoring
type: Opaque
stringData:
  # Generate with: htpasswd -c auth username
  # Format: username:$apr1$encrypted$password
  auth: |
    admin:$apr1$CHANGE_ME_HTPASSWD_HASH

---
# Image Pull Secret (if using private registry)
apiVersion: v1
kind: Secret
metadata:
  name: regcred
  namespace: knowledgebeast
  labels:
    app: knowledgebeast
type: kubernetes.io/dockerconfigjson
stringData:
  .dockerconfigjson: |
    {
      "auths": {
        "https://index.docker.io/v1/": {
          "username": "CHANGE_ME_DOCKER_USERNAME",
          "password": "CHANGE_ME_DOCKER_PASSWORD",
          "email": "CHANGE_ME_EMAIL",
          "auth": "CHANGE_ME_BASE64_USERNAME_PASSWORD"
        }
      }
    }

---
# External Secrets Operator Example
# Uncomment if using external-secrets operator
# apiVersion: external-secrets.io/v1beta1
# kind: ExternalSecret
# metadata:
#   name: knowledgebeast-external-secrets
#   namespace: knowledgebeast
# spec:
#   refreshInterval: 1h
#   secretStoreRef:
#     name: aws-secrets-manager
#     kind: SecretStore
#   target:
#     name: knowledgebeast-secrets
#     creationPolicy: Owner
#   data:
#     - secretKey: SECRET_KEY
#       remoteRef:
#         key: /knowledgebeast/prod/secret-key
#     - secretKey: JWT_SECRET
#       remoteRef:
#         key: /knowledgebeast/prod/jwt-secret
#     - secretKey: REDIS_PASSWORD
#       remoteRef:
#         key: /knowledgebeast/prod/redis-password

---
# Sealed Secret Example
# Uncomment if using sealed-secrets
# apiVersion: bitnami.com/v1alpha1
# kind: SealedSecret
# metadata:
#   name: knowledgebeast-sealed-secrets
#   namespace: knowledgebeast
# spec:
#   encryptedData:
#     SECRET_KEY: CHANGE_ME_SEALED_SECRET_VALUE
#     JWT_SECRET: CHANGE_ME_SEALED_SECRET_VALUE
#     REDIS_PASSWORD: CHANGE_ME_SEALED_SECRET_VALUE
