---
# KnowledgeBeast Application ConfigMap
# Non-sensitive configuration for the application
apiVersion: v1
kind: ConfigMap
metadata:
  name: knowledgebeast-config
  namespace: knowledgebeast
  labels:
    app: knowledgebeast
data:
  # Application environment
  APP_ENV: "production"
  LOG_LEVEL: "INFO"
  PYTHONUNBUFFERED: "1"

  # Worker configuration
  WORKERS: "4"
  MAX_REQUESTS: "1000"
  MAX_REQUESTS_JITTER: "50"
  TIMEOUT: "60"
  GRACEFUL_TIMEOUT: "30"
  KEEP_ALIVE: "5"

  # ChromaDB configuration
  CHROMA_HOST: "knowledgebeast-chromadb"
  CHROMA_PORT: "8000"
  CHROMA_PERSIST_DIRECTORY: "/data/chroma"

  # Redis configuration
  REDIS_HOST: "knowledgebeast-redis"
  REDIS_PORT: "6379"
  REDIS_DB: "0"

  # Performance tuning
  CACHE_TTL: "3600"
  MAX_CONCURRENT_QUERIES: "100"
  QUERY_TIMEOUT: "30"
  CONNECTION_POOL_SIZE: "20"
  CONNECTION_POOL_MAX_OVERFLOW: "10"

  # Observability
  PROMETHEUS_ENABLED: "true"
  PROMETHEUS_PORT: "8001"
  OTEL_EXPORTER_OTLP_ENDPOINT: "http://jaeger:4318"
  OTEL_SERVICE_NAME: "knowledgebeast-api"

  # Feature flags
  ENABLE_MULTIMODAL: "true"
  ENABLE_RERANKING: "true"
  ENABLE_CIRCUIT_BREAKER: "true"
  ENABLE_RATE_LIMITING: "true"

  # Chunking configuration
  DEFAULT_CHUNK_SIZE: "512"
  DEFAULT_CHUNK_OVERLAP: "50"
  MAX_CHUNK_SIZE: "2048"

  # Query configuration
  DEFAULT_TOP_K: "10"
  MAX_TOP_K: "100"
  QUERY_CACHE_SIZE: "1000"

---
# Application Configuration File
# Detailed application settings
apiVersion: v1
kind: ConfigMap
metadata:
  name: knowledgebeast-app-config
  namespace: knowledgebeast
  labels:
    app: knowledgebeast
data:
  app.yaml: |
    # KnowledgeBeast Application Configuration
    version: "2.3.0"

    server:
      host: "0.0.0.0"
      port: 8000
      workers: 4
      max_requests: 1000
      timeout: 60

    database:
      chromadb:
        host: "knowledgebeast-chromadb"
        port: 8000
        persist_directory: "/data/chroma"
        collection_name: "knowledgebeast"

    cache:
      redis:
        host: "knowledgebeast-redis"
        port: 6379
        db: 0
        max_connections: 50
        socket_timeout: 5
        socket_connect_timeout: 5
        retry_on_timeout: true

    performance:
      cache_ttl: 3600
      max_concurrent_queries: 100
      query_timeout: 30
      connection_pool_size: 20
      enable_query_cache: true

    chunking:
      default_chunk_size: 512
      default_chunk_overlap: 50
      max_chunk_size: 2048
      strategies:
        - semantic
        - fixed
        - sentence

    embedding:
      model: "all-MiniLM-L6-v2"
      dimension: 384
      batch_size: 32

    reranking:
      enabled: true
      model: "cross-encoder/ms-marco-MiniLM-L-6-v2"
      top_k: 10

    observability:
      metrics:
        enabled: true
        port: 8001
        path: "/metrics"
      tracing:
        enabled: true
        endpoint: "http://jaeger:4318"
        sample_rate: 0.1
      logging:
        level: "INFO"
        format: "json"
        output: "stdout"

    security:
      cors:
        enabled: true
        origins:
          - "https://app.knowledgebeast.com"
        methods:
          - "GET"
          - "POST"
          - "PUT"
          - "DELETE"
      rate_limiting:
        enabled: true
        default_limit: 100
        window: 60

  logging.conf: |
    [loggers]
    keys=root,knowledgebeast

    [handlers]
    keys=console,file

    [formatters]
    keys=json,detailed

    [logger_root]
    level=INFO
    handlers=console

    [logger_knowledgebeast]
    level=INFO
    handlers=console,file
    qualname=knowledgebeast
    propagate=0

    [handler_console]
    class=StreamHandler
    level=INFO
    formatter=json
    args=(sys.stdout,)

    [handler_file]
    class=handlers.RotatingFileHandler
    level=INFO
    formatter=detailed
    args=('/app/logs/app.log', 'a', 10485760, 10)

    [formatter_json]
    class=pythonjsonlogger.jsonlogger.JsonFormatter
    format=%(asctime)s %(name)s %(levelname)s %(message)s

    [formatter_detailed]
    format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
    datefmt=%Y-%m-%d %H:%M:%S

---
# Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: knowledgebeast
  labels:
    app: knowledgebeast
    component: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      scrape_timeout: 10s
      evaluation_interval: 15s
      external_labels:
        cluster: 'knowledgebeast-prod'
        environment: 'production'

    # Alertmanager configuration
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
                - alertmanager:9093

    # Load rules
    rule_files:
      - '/etc/prometheus/alerts.yml'

    # Scrape configurations
    scrape_configs:
      # KnowledgeBeast API
      - job_name: 'knowledgebeast-api'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - knowledgebeast
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            action: keep
            regex: knowledgebeast
          - source_labels: [__meta_kubernetes_pod_label_component]
            action: keep
            regex: api
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__

      # Redis metrics
      - job_name: 'redis'
        static_configs:
          - targets:
              - 'knowledgebeast-redis:6379'

      # ChromaDB metrics
      - job_name: 'chromadb'
        static_configs:
          - targets:
              - 'knowledgebeast-chromadb:8000'

  alerts.yml: |
    groups:
      - name: knowledgebeast_alerts
        interval: 30s
        rules:
          # High error rate
          - alert: HighErrorRate
            expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.05
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "High error rate detected"
              description: "Error rate is {{ $value }} for {{ $labels.instance }}"

          # High latency
          - alert: HighLatency
            expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 0.1
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High latency detected"
              description: "P95 latency is {{ $value }}s for {{ $labels.instance }}"

          # High CPU usage
          - alert: HighCPUUsage
            expr: rate(process_cpu_seconds_total[5m]) > 0.8
            for: 10m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage"
              description: "CPU usage is {{ $value }} for {{ $labels.instance }}"

          # High memory usage
          - alert: HighMemoryUsage
            expr: process_resident_memory_bytes / 1024 / 1024 / 1024 > 0.9
            for: 10m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage"
              description: "Memory usage is {{ $value }}GB for {{ $labels.instance }}"

          # Pod down
          - alert: PodDown
            expr: up{job="knowledgebeast-api"} == 0
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "Pod is down"
              description: "{{ $labels.instance }} has been down for more than 5 minutes"
